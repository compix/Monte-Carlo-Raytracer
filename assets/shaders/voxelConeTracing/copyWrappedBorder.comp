#version 430

uniform layout(rgba8) image3D u_image;

const int BORDER_WIDTH = 1;

uniform int u_clipmapResolution;
uniform int u_clipmapResolutionWithBorder;
uniform int u_faceCount;
uniform int u_clipmapCount;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main()
{
	if (gl_GlobalInvocationID.x >= u_clipmapResolutionWithBorder ||
	    gl_GlobalInvocationID.y >= u_clipmapResolutionWithBorder ||
	    gl_GlobalInvocationID.z >= u_clipmapResolutionWithBorder) return;
		
	// TODO: Optimize this - might be able to avoid this condition testing
	if (all(lessThan(ivec3(gl_GlobalInvocationID), ivec3(u_clipmapResolution + BORDER_WIDTH))) && 
		all(greaterThan(ivec3(gl_GlobalInvocationID), ivec3(0))))
		return;
    
	ivec3 readPos = ((ivec3(gl_GlobalInvocationID) + u_clipmapResolution - ivec3(BORDER_WIDTH)) & (u_clipmapResolution - 1)) + ivec3(BORDER_WIDTH);
	ivec3 writePos = ivec3(gl_GlobalInvocationID);
	
	// TODO: Optimize this - better parallelization can be achieved
	for (int i = 0; i < u_clipmapCount; ++i)
	{
		for (int j = 0; j < u_faceCount; ++j)
		{
			vec4 value = imageLoad(u_image, readPos + ivec3(u_clipmapResolutionWithBorder * j, 0, 0));
			imageStore(u_image, writePos + ivec3(u_clipmapResolutionWithBorder * j, 0, 0), value); 
		}
		
		readPos.y += u_clipmapResolutionWithBorder;
		writePos.y += u_clipmapResolutionWithBorder;
	}
}
