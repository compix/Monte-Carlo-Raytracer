#version 430
#extension GL_ARB_shader_image_load_store : require

#define VOXEL_TEXTURE_WITH_BORDER

const int BORDER_WIDTH = 1;

uniform layout(rgba8) image3D u_image;

uniform ivec3 u_prevRegionMin;
uniform int u_clipmapResolution;
uniform int u_clipmapResolutionWithBorder;
uniform int u_clipmapLevel;
uniform int u_downsampleTransitionRegionSize;

const ivec3 OFFSETS[8] = {
	ivec3(0, 0, 0),
	ivec3(1, 0, 0),
	ivec3(0, 1, 0),
	ivec3(1, 1, 0),
	ivec3(0, 0, 1),
	ivec3(1, 0, 1),
	ivec3(0, 1, 1),
	ivec3(1, 1, 1)
};

ivec3 getFaceOffset(int i, int resolution)
{
	return ivec3(resolution * i, 0, 0);
}

void fetchTexelBlock(int faceIdx, ivec3 positions[8], out vec4 values[8], int resolution)
{
	ivec3 faceOffset = getFaceOffset(faceIdx, resolution);
	values[0] = imageLoad(u_image, positions[0] + faceOffset);
	values[1] = imageLoad(u_image, positions[1] + faceOffset);
	values[2] = imageLoad(u_image, positions[2] + faceOffset);
	values[3] = imageLoad(u_image, positions[3] + faceOffset);
	values[4] = imageLoad(u_image, positions[4] + faceOffset);
	values[5] = imageLoad(u_image, positions[5] + faceOffset);
	values[6] = imageLoad(u_image, positions[6] + faceOffset);
	values[7] = imageLoad(u_image, positions[7] + faceOffset);
}

ivec3 toCurrentLevelVoxelCoordinates(ivec3 p)
{
	return p / 2;
}

ivec3 toPrevLevelVoxelCoordinates(ivec3 p)
{
	return p * 2;
}

ivec3 toImageCoords(ivec3 p, int resolution)
{
	return (p + ivec3(resolution) * (abs(p / resolution) + 1)) & (resolution - 1); // & (resolution - 1) is a more efficient % resolution
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main()
{
    int halfClipmapResolution = u_clipmapResolution / 2;
	if (gl_GlobalInvocationID.x >= halfClipmapResolution ||
	    gl_GlobalInvocationID.y >= halfClipmapResolution ||
	    gl_GlobalInvocationID.z >= halfClipmapResolution) return;

	ivec3 curLevelPos = toCurrentLevelVoxelCoordinates(u_prevRegionMin) + ivec3(gl_GlobalInvocationID);
	ivec3 prevLevelPos = toPrevLevelVoxelCoordinates(curLevelPos);
	ivec3 prevImagePosStart = toImageCoords(prevLevelPos, u_clipmapResolution);
	
	ivec3 imageWritePos = toImageCoords(curLevelPos, u_clipmapResolution);
	
#ifdef VOXEL_TEXTURE_WITH_BORDER
	int resolution = u_clipmapResolution + BORDER_WIDTH * 2;
	imageWritePos += ivec3(BORDER_WIDTH);
#else
	int resolution = u_clipmapResolution;
#endif
	
	imageWritePos.y += resolution * u_clipmapLevel;
	ivec3 imagePositions[8];
	
	for (int i = 0; i < 8; ++i)
	{
		imagePositions[i] = prevImagePosStart + OFFSETS[i];
#ifdef VOXEL_TEXTURE_WITH_BORDER
		imagePositions[i] += ivec3(BORDER_WIDTH);
#endif
		imagePositions[i].y += resolution * (u_clipmapLevel - 1);
	}
	
	vec4 values[8];
	float downsampledValues[6];
    
    // Integrate in all axis-directions (front-to-back compositing step) and
    // take the average
    // positive x
	fetchTexelBlock(0, imagePositions, values, resolution);
	downsampledValues[0] = (values[0].a + (1.0 - values[0].a) * values[1].a +
                            values[2].a + (1.0 - values[2].a) * values[3].a +
                            values[4].a + (1.0 - values[4].a) * values[5].a +
                            values[6].a + (1.0 - values[6].a) * values[7].a) * 0.25;

    // negative x
	fetchTexelBlock(1, imagePositions, values, resolution);
	downsampledValues[1] = (values[1].a + (1.0 - values[1].a) * values[0].a +
                            values[3].a + (1.0 - values[3].a) * values[2].a +
                            values[5].a + (1.0 - values[5].a) * values[4].a +
                            values[7].a + (1.0 - values[7].a) * values[6].a) * 0.25;
    
    // positive y
	fetchTexelBlock(2, imagePositions, values, resolution);
	downsampledValues[2] = (values[0].a + (1.0 - values[0].a) * values[2].a +
                            values[1].a + (1.0 - values[1].a) * values[3].a +
                            values[4].a + (1.0 - values[4].a) * values[6].a +
                            values[5].a + (1.0 - values[5].a) * values[7].a) * 0.25;

    // negative y
	fetchTexelBlock(3, imagePositions, values, resolution);
	downsampledValues[3] = (values[2].a + (1.0 - values[2].a) * values[0].a +
                            values[3].a + (1.0 - values[3].a) * values[1].a +
                            values[6].a + (1.0 - values[6].a) * values[4].a +
                            values[7].a + (1.0 - values[7].a) * values[5].a) * 0.25;

    // positive z
	fetchTexelBlock(4, imagePositions, values, resolution);
	downsampledValues[4] = (values[0].a + (1.0 - values[0].a) * values[4].a +
                            values[1].a + (1.0 - values[1].a) * values[5].a +
                            values[2].a + (1.0 - values[2].a) * values[6].a +
                            values[3].a + (1.0 - values[3].a) * values[7].a) * 0.25;
    
    // negative z
	fetchTexelBlock(5, imagePositions, values, resolution);
	downsampledValues[5] = (values[4].a + (1.0 - values[4].a) * values[0].a +
                            values[5].a + (1.0 - values[5].a) * values[1].a +
                            values[6].a + (1.0 - values[6].a) * values[2].a +
                            values[7].a + (1.0 - values[7].a) * values[3].a) * 0.25;
			   
    // If we are in the transition region an interpolation between the directly voxelized and the downsampled representations
	// needs to be performed:
	vec3 center = vec3(toCurrentLevelVoxelCoordinates(u_prevRegionMin)) + vec3(halfClipmapResolution / 2);
	vec3 distanceToCenter = abs(vec3(curLevelPos) + 0.5 - center) - 0.5; // in [0, halfClipmapResolution / 2 - 1]
    float lerpFactor = 0.0;
	if (any(greaterThanEqual(distanceToCenter, vec3(halfClipmapResolution / 2 - u_downsampleTransitionRegionSize))))
	{
		vec3 d = distanceToCenter;
		lerpFactor = max(d.x, max(d.y, d.z)) - (halfClipmapResolution / 2.0 - u_downsampleTransitionRegionSize) + 1.0;
		lerpFactor = lerpFactor / (u_downsampleTransitionRegionSize + 1.0);
	}

    for (int i = 0; i < 6; ++i)
    {
        ivec3 imgPos = imageWritePos + getFaceOffset(i, resolution);
        vec4 v = imageLoad(u_image, imgPos);
        // In the red component the directly voxelized representation is stored
        v.a = mix(downsampledValues[i], v.r, lerpFactor);
        // Store in g the combined mixed value (for voxel visualization to observe the transition)
        v.g = v.a;
        imageStore(u_image, imgPos, v);
    }
}
